import pandas as pd
import numpy as np

df=pd.read_csv('emails.csv')

df

df.isnull().sum()

Z=df.drop('Prediction',axis=1)
X=Z.drop('Email No.',axis=1)
y=df['Prediction']

X

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=0)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
knn_predictions = knn.predict(X_test)

from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

print("KNN Performance")
print(classification_report(y_test, knn_predictions))
print("\n-------------------------------------------------")
print("Accuracy:", accuracy_score(y_test, knn_predictions))
print("\n-------------------------------------------------")
print("Confusion Matrix:\n", confusion_matrix(y_test, knn_predictions))

import seaborn as sns
import matplotlib.pyplot as plt

cm=confusion_matrix(y_test,knn_predictions)
sns.heatmap(cm,annot=True,cmap='Blues',fmt='d', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual Class')
plt.xticks([0, 1], ['Not Spam', 'Spam'])
plt.yticks([0, 1], ['Not Spam', 'Spam'])
plt.show()

from sklearn.svm import SVC

svm = SVC(kernel='linear')
svm.fit(X_train, y_train)
svm_predictions = svm.predict(X_test)

print("\nSVM Performance")
print(classification_report(y_test, svm_predictions))
print("\n-------------------------------------------------")
print("Accuracy:", accuracy_score(y_test, svm_predictions))
print("\n-------------------------------------------------")
print("Confusion Matrix:\n", confusion_matrix(y_test, svm_predictions))

svm = SVC(kernel='rbf', random_state=1, gamma=0.1,C=0.8)
svm.fit(X_train, y_train)
svm_predictions = svm.predict(X_test)

print("\nSVM Performance")
print(classification_report(y_test, svm_predictions))
print("\n-------------------------------------------------")
print("Accuracy:", accuracy_score(y_test, svm_predictions))
print("\n-------------------------------------------------")
print("Confusion Matrix:\n", confusion_matrix(y_test, svm_predictions))


###om sklearn.svm with specific parameters:

kernel='rbf': Specifies the Radial Basis Function (RBF) kernel, also known as the Gaussian kernel. The RBF kernel is a popular choice for SVM as it can handle non-linear relationships by mapping data into a higher-dimensional space.

random_state=1: Ensures reproducibility of the modelâ€™s behavior by fixing the random seed to 1. This is especially useful for debugging and comparing results.

gamma=0.1: Controls the influence of a single training example. A lower gamma value (like 0.1) means that the influence radius is broader, which can create a smoother decision boundary but risks underfitting.

C=0.8: The regularization parameter C controls the trade-off between achieving a low error on training data and minimizing the margin (the distance between the decision boundary and data points). A smaller C (like 0.8) allows a wider margin but may allow some misclassifications, helping to avoid overfitting.

